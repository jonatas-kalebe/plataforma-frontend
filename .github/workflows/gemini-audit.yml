name: Gemini Visual Audit

on:
  pull_request:
    branches: [ main ]
    paths: 
      - 'src/**'
      - 'tests/**'
      - 'package.json'
      - 'angular.json'
      - 'playwright.config.ts'

jobs:
  gemini-audit:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Build and test SSR health check
      run: |
        npm run build:ssr:frontend
        timeout 10s npm run serve:ssr:frontend & 
        sleep 5
        curl -f http://localhost:4000 || exit 1
        pkill -f "node dist/frontend/server/main.server.mjs" || true
        
    - name: Run Playwright tests
      run: npm run test:e2e
      
    - name: Setup Google Cloud CLI
      if: success()
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
        service_account_key: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}
        export_default_credentials: true
        
    - name: Run Gemini visual analysis
      if: success()
      env:
        GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
      run: |
        # Install Google Cloud SDK Gemini CLI if needed
        gcloud components install alpha --quiet
        
        # Analyze landing page accessibility and design
        echo "# Gemini Visual Audit Report" > gemini-report.md
        echo "" >> gemini-report.md
        echo "## Landing Page Analysis" >> gemini-report.md
        echo "" >> gemini-report.md
        
        # Use Gemini to analyze the screenshot
        if [ -f "test-results/visual-home-visual-chromium/home-visual-1-actual.png" ]; then
          gcloud alpha ai models generate-content \
            --model=gemini-1.5-flash \
            --prompt="Analyze this Angular landing page screenshot for accessibility, typography readability, contrast, visual hierarchy, and responsiveness. Focus on WCAG AA compliance and minimalist design heuristics. Provide a markdown report with sections: Summary, Critical Issues, Quick Improvements, Suggestions." \
            --image="test-results/visual-home-visual-chromium/home-visual-1-actual.png" \
            --format="text" >> gemini-report.md
        else
          echo "No screenshot found for analysis" >> gemini-report.md
        fi
        
    - name: Comment PR with Gemini analysis
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('gemini-report.md')) {
            const report = fs.readFileSync('gemini-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ¤– Gemini Visual Audit\n\n${report}\n\n---\n*Automated analysis by Gemini CLI*`
            });
          }
          
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-results/
        retention-days: 7