name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: cicd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18.x, 20.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run unit tests
        run: npm run test -- --no-watch --browsers=ChromeHeadless --code-coverage

      - name: Build SSR (sanity check)
        run: npm run build:ssr:frontend

      - name: Upload coverage
        if: matrix.node == '20.x'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  e2e:
    runs-on: ubuntu-latest
    needs: unit
    env:
      BASE_URL: http://localhost:4000
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Validate scripts existence
        run: |
          node -e "
            const p=require('./package.json').scripts||{};
            const req=['build:ssr:frontend','serve:ssr:frontend','test:e2e'];
            const missing=req.filter(s=>!p[s]);
            if(missing.length){console.error('Faltam scripts:', missing.join(', ')); process.exit(1);}
          "

      - name: Build SSR
        run: npm run build:ssr:frontend

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start SSR server
        run: |
          nohup npm run serve:ssr:frontend > server.log 2>&1 &
          echo $! > ssr.pid
          for i in $(seq 1 60); do
            curl -fsS $BASE_URL >/dev/null && break
            sleep 2
          done
          curl -fsS $BASE_URL >/dev/null

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts
          path: |
            test-results/**
            playwright-report/**
            server.log
          retention-days: 7

      - name: Stop SSR
        if: always()
        run: |
          if [ -f ssr.pid ]; then kill $(cat ssr.pid) || true; fi

  lighthouse:
    runs-on: ubuntu-latest
    needs: e2e
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Build and serve SSR
        run: |
          npm run build:ssr:frontend
          nohup npm run serve:ssr:frontend > server-lh.log 2>&1 &
          for i in $(seq 1 40); do
            curl -fsS http://localhost:4000 >/dev/null && break
            sleep 2
          done
          curl -fsS http://localhost:4000 >/dev/null

      - name: Run Lighthouse CI
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: npm run test:lighthouse

      - name: Upload LHCI artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse
          path: .lighthouseci/**
          retention-days: 7
